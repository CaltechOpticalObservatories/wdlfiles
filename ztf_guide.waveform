/* -*- C -*- */
/** ---------------------------------------------------------------------------
 * @file   wasp.wav
 * @brief  WaSP timing file, rules for waveform generation and scripting
 *
 * syntax (is case sensitive):
 *
 * WAVEFORM waveformlabel { rules }
 *
 * where rules (enclosed in curly braces) are as follows:
 *
 * [time]: [=timelabel] SET signallabel TO level;
 *
 * time: at least one time label is required, followed by colon
 *       (if omitted then SET... lines are all at the same time as previous time)
 *       arithmetic operations are allowed for time
 *       units are allowed to follow numbers, E.G. ns, us, ms
 *       ".+" means to add to the previous time
 *
 * =timelabel is an optional label for this time, which can be used elsewhere
 *
 * SET signallabel TO level; 
 * is required and must end with a semi-colon
 * signallabel and level can be defined anywhere
 *
 */

/*#include ztf_guide.def*/

#define clockfreq  100000000                      /* 100 MHz master clock frequency in Hz */
#define sec        *(clockfreq)                   /* clock cycles per second   */
#define ms         *(clockfreq/1000)              /* clock cycles per millisec */
#define us         *(clockfreq/1000000)           /* clock cycles per microsec */
#define ns	   *(clockfreq/10000000)	  /* clock cycles per nanosecond */
#define clicks     *(clockfreq/100000000)

/* Timing defines */
/* Generic timing parameters */
#define TICK	      #eval 1 clicks		  /* 10 nsec */
#define 1ms	      #eval 99997 clicks	  /* 999 usec */
#define 10ms          #eval 999999 clicks         /* 9999 usec */

/* Science timing parameters */
#define TDRT	      #eval 25 us		  /* 25 usec */
#define TDTR          #eval 25 us
#define TOI           #eval 25 us		  /* Science parallel time slice */
#define TDX           #eval 9  clicks             /*  90 nsec */
#define TWDX          #eval 11 clicks		  /* 110 nsec */
#define TR1           #eval 30 clicks            /* 40 for short Time delay after serial phase 1 */
#define TR3	      #eval 50 clicks		  /* 60 for short Time delay after serial phase 3 */
#define S2TORESET     #eval 20 clicks             /* serial 2 phase to reset timing */

/* Guider timing parameters */
#define PDELAY          1034     /*1034*/            /* 20 usec used by Tim's Leach code		*/
						  /* Use as a first approximation of		*/
						  /* timing					*/
#define SDELAY	      #eval 0.15 us /*0.7*/              /*  1 usec used by Tim's Leach Code		*/
#define ARGDELAY      #eval 3 us /*2*/                /* Do a 3 us delay to sample the reset level */
#define SIGDELAY      #eval 3 us  /*2*/               /* Delay 3 us at the end of a pixel clocking for sampling time */
#define SWDELAY	      #eval 1.12 us		  /*  1.12 usec used by Tim's Leach code	*/
#define RGDELAY       #eval 0.4 us	/*1.2*/	  /*  1.2 usec for guider reset width */
#define ADELAY        #eval 1.2 us                /* 100 ns for the amp test clock              */

/* Fake signal parameters */
#define HALFPIX       #eval 256 clicks             /* 500 ns */


/* Logical state defines */
#define OPEN		    1
#define CLOSE		    0
#define High		    1
#define Low		    0
#define BLOpen		    0
#define BLClose		    1
#define PhiRHigh            0
#define PhiRLow             1

WAVEFORM FParallelUp {
 0:			SET UFPClock1  TO _GPAR_CLOCK_LOW, FAST;
			SET UFPClock2  TO _GPAR_CLOCK_HIGH, FAST;
			SET UFPClock3  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET UFPClock3  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET UFPClock2  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET UFPClock1  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET UFPClock3  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET UFPClock2  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET UFPClock1  TO _GPAR_CLOCK_LOW, FAST;
}

WAVEFORM FParallelDown {
 0:			SET DFPClock1  TO _GPAR_CLOCK_LOW, FAST;
			SET DFPClock2  TO _GPAR_CLOCK_HIGH, FAST;
			SET DFPClock3  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET DFPClock3  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET DFPClock2  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET DFPClock1  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET DFPClock3  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET DFPClock2  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET DFPClock1  TO _GPAR_CLOCK_LOW, FAST;
} 
WAVEFORM FParallelSplit_Old {
 0:			SET SFPClock1  TO _GPAR_CLOCK_HIGH, FAST;
			SET SFPClock2  TO _GPAR_CLOCK_HIGH, FAST;
			SET SFPClock3  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET SFPClock1  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET SFPClock3  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET SFPClock2  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET SFPClock1  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET SFPClock3  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET SFPClock2  TO _GPAR_CLOCK_HIGH, FAST;
} 
#define FPARDELAY 16650 /* (40 Science prescan pixels + 7.01us of Science TG)/2 */
WAVEFORM FParallelSplit {
 0:		        SET SFPClock2  TO _GPAR_CLOCK_LOW, FAST;
    		        SET SFPClock3  TO _GPAR_CLOCK_HIGH, FAST;
 .+FPARDELAY:		SET SFPClock3  TO _GPAR_CLOCK_LOW, FAST;
                        SET SFPClock1 TO _GPAR_CLOCK_HIGH,FAST;
 .+FPARDELAY:		SET SFPClock2  TO _GPAR_CLOCK_HIGH, FAST;
                        SET SFPClock1 TO _GPAR_CLOCK_LOW,FAST;
  .+FPARDELAY:  RETURN;
}
WAVEFORM GFParallelSplit { /*G is read to the UP direction*/
 0:			SET SFPClock1  TO _GPAR_CLOCK_HIGH, FAST;
			SET SFPClock2  TO _GPAR_CLOCK_HIGH, FAST;
			SET SFPClock3  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET SFPClock1  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET SFPClock3  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET SFPClock2  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET SFPClock1  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET SFPClock3  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET SFPClock2  TO _GPAR_CLOCK_HIGH, FAST;
  0:			SET GA1T  TO _GPAR_CLOCK_HIGH, FAST;
			SET GA2T  TO _GPAR_CLOCK_HIGH, FAST;
			SET GA3T  TO _GPAR_CLOCK_LOW, FAST;
                        SET GA1B TO 0,FAST;
                        SET GA2B TO 0,FAST;
                        SET GA3B TO -9,FAST;
 .+PDELAY:		SET GA1T  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET GA3T  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET GA2T  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET GA1T  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET GA3T  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET GA2T  TO _GPAR_CLOCK_HIGH, FAST;
                       
}


/*Split on Guide chip can't work because Bottom serial register is not working*/
WAVEFORM GParallelSplit {
 0:			SET SGPClock1  TO _GPAR_CLOCK_HIGH, FAST;
			SET SGPClock2  TO _GPAR_CLOCK_HIGH, FAST;
			SET SGPClock3  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET SGPClock1  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET SGPClock3  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET SGPClock2  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET SGPClock1  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET SGPClock3  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET SGPClock2  TO _GPAR_CLOCK_HIGH, FAST;
} 
WAVEFORM GParallelUp {
 0:			SET UGPClock1  TO _GPAR_CLOCK_HIGH, FAST;
			SET UGPClock2  TO _GPAR_CLOCK_HIGH, FAST;
			SET UGPClock3  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET UGPClock1  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET UGPClock3  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET UGPClock2  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET UGPClock1  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET UGPClock3  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET UGPClock2  TO _GPAR_CLOCK_HIGH, FAST;
}
WAVEFORM GParallelTopOnly {
 0:			SET GA1T  TO _GPAR_CLOCK_HIGH, FAST;
			SET GA2T  TO _GPAR_CLOCK_HIGH, FAST;
			SET GA3T  TO _GPAR_CLOCK_LOW, FAST;
                        SET GA1B TO 0,FAST;
                        SET GA2B TO 0,FAST;
                        SET GA3B TO -9,FAST;
 .+PDELAY:		SET GA1T  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET GA3T  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET GA2T  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET GA1T  TO _GPAR_CLOCK_HIGH, FAST;
 .+PDELAY:		SET GA3T  TO _GPAR_CLOCK_LOW, FAST;
 .+PDELAY:		SET GA2T  TO _GPAR_CLOCK_HIGH, FAST;
}


// Serial Transfer//
WAVEFORM FGSerialReceiving {
 0:	  	        SET SSClock1  TO _GSER_CLOCK_LOW, FAST;
                        SET SSClock2  TO _GSER_CLOCK_HIGH, FAST;
                        SET SSClock3  TO _GSER_CLOCK_LOW, FAST;
.+SDELAY:               SET RG        TO _RG_CLOCK_HIGH, FAST;
}
WAVEFORM GSerialReceiving {
 0:	  	        SET S1T  TO _GSER_CLOCK_LOW, SLOW;
                        SET S2T  TO _GSER_CLOCK_HIGH, SLOW;
                        SET S3T  TO _GSER_CLOCK_LOW, SLOW;
                        SET S1B TO 0,FAST;
                        SET S2B TO 0,FAST;
                        SET S3B TO 0,FAST;
.+SDELAY:               SET RG        TO _RG_CLOCK_HIGH, FAST;
}
WAVEFORM GSerial2to3{
 0:	  	        SET S1T  TO _GSER_CLOCK_LOW, SLOW;
                        SET S2T  TO _GSER_CLOCK_HIGH, SLOW;
                        SET S3T  TO _GSER_CLOCK_LOW, SLOW;
                        SET S1B TO 0,FAST;
                        SET S2B TO 0,FAST;
                        SET S3B TO 0,FAST;
 100:                   RETURN;
}

#define G_RGT 8
#define G_RGsettleT 100
#define G_RefSamples 100
#define G_SWsettleT 10
#define G_SWslewT 28
#define G_PixelT 252
#define G_Test 2000

WAVEFORM GSerialReadRight_smooth{
#include ztf_guide_ReadPixelSTA.h
}

#define G_PixelT_G 400
WAVEFORM GuideSerialReadRightTop_smooth{
  #include ztf_guide_ReadPixelSTA_G.h
}

#define G_PixelTFlush 100
WAVEFORM GuidePixelFlush{
#include ztf_guide_FlushPixelSTA_G.h
}

WAVEFORM GuideSerialReadRightTop{
 0:	=StartSShift	SET S3T  TO _GSER_CLOCK_LOW, FAST;
                        SET S2T  TO _GSER_CLOCK_HIGH, FAST;
                        SET S1T  TO _GSER_CLOCK_LOW, FAST;
                        SET S1B TO 0,FAST;
                        SET S2B TO 0,FAST;
                        SET S3B TO 0,FAST;
                        SET SW       TO _GSW_CLOCK_LOW, FAST;
                        SET RG       TO _RG_CLOCK_HIGH, FAST;    /* This is a clock signal for guider/focus */
                        SET PIXEL    TO High;
 .+TICK:                SET PIXEL    TO Low;
                        SET FRAME    TO Low;
			SET LINE     TO Low;
 .+RGDELAY:		SET RG	     TO _RG_CLOCK_LOW, FAST;
 .+ARGDELAY:		SET S1T  TO _GSER_CLOCK_HIGH, FAST;
 .+SDELAY:		SET S2T  TO _GSER_CLOCK_LOW, FAST;  /* Charge is all under phase3L, phase1R */
 .+SDELAY:		SET S3T  TO _GSER_CLOCK_HIGH, FAST; /* Charge under 3L,1L, 1R,3R            */
			SET SW        TO _GSW_CLOCK_HIGH, FAST;   /* And SW for both R and L              */
 .+SDELAY:		SET S1T  TO _GSER_CLOCK_LOW, FAST;  /* Under 1L and SW, 3R and SW           */
 .+SDELAY:		SET S2T  TO _GSER_CLOCK_HIGH,FAST;
                        /* SET SW        TO _GSW_CLOCK_HIGH, FAST;*/ /* Set the SW with Serial 2 phase */
 .+SDELAY:		SET S3T  TO _GSER_CLOCK_LOW, FAST;
                        /*.+SDELAY:	*/	SET SW       TO _GSW_CLOCK_LOW, FAST; /* Now we have charge signal to read */
                        /* .+SDELAY:              SET SW       TO _GSW_CLOCK_HIGH, FAST; */
 .+SIGDELAY:              RETURN;
}
#define PulseWidth 20
#define PulsePeriod 500

WAVEFORM PulseTest{
 8: SET PIXEL TO High;
  .+1:  SET PIXEL TO Low;
  SET LINE TO Low;
  SET FRAME TO Low;

  
 10: SET SSClock1 TO _GSER_CLOCK_LOW,FAST;
  SET SSClock2 TO _GSER_CLOCK_LOW,FAST;
  SET SSClock3 TO _GSER_CLOCK_LOW,FAST;
  SET RG TO _RG_CLOCK_LOW,FAST;
  SET SW TO _GSW_CLOCK_LOW,FAST;
  SET SGPClock1 TO _GPAR_CLOCK_LOW,FAST;
  SET SGPClock2 TO _GPAR_CLOCK_LOW,FAST;
  SET SGPClock3 TO _GPAR_CLOCK_LOW,FAST;
  SET SFPClock1 TO _GPAR_CLOCK_LOW,FAST;
  SET SFPClock2 TO _GPAR_CLOCK_LOW,FAST;
  SET SFPClock3 TO _GPAR_CLOCK_LOW,FAST;
  
  .+PulsePeriod: SET SSClock1 TO _GSER_CLOCK_HIGH,FAST;
  .+PulseWidth: SET SSClock1 TO _GSER_CLOCK_LOW,FAST;
  .+PulsePeriod: SET SSClock2 TO _GSER_CLOCK_HIGH,FAST;
  .+PulseWidth: SET SSClock2 TO _GSER_CLOCK_LOW,FAST;
  .+PulsePeriod: SET SSClock3 TO _GSER_CLOCK_HIGH,FAST;
  .+PulseWidth: SET SSClock3 TO _GSER_CLOCK_LOW,FAST;
  .+PulsePeriod: SET RG TO _RG_CLOCK_HIGH,FAST;
  .+PulseWidth: SET RG TO _RG_CLOCK_LOW,FAST;
  .+PulsePeriod: SET SW TO _GSW_CLOCK_HIGH,FAST;
  .+PulseWidth: SET SW TO _GSW_CLOCK_LOW,FAST;
  .+PulsePeriod: SET GA1T TO _GPAR_CLOCK_HIGH,FAST;
  .+PulseWidth: SET GA1T TO _GPAR_CLOCK_LOW,FAST;
  .+PulsePeriod: SET GA2T TO _GPAR_CLOCK_HIGH,FAST;
  .+PulseWidth: SET GA2T TO _GPAR_CLOCK_LOW,FAST;
  .+PulsePeriod: SET GA3T TO _GPAR_CLOCK_HIGH,FAST;
  .+PulseWidth: SET GA3T TO _GPAR_CLOCK_LOW,FAST;
  .+PulsePeriod: SET GA1B TO _GPAR_CLOCK_HIGH,FAST;
  .+PulseWidth: SET GA1B TO _GPAR_CLOCK_LOW,FAST;
  .+PulsePeriod: SET GA2B TO _GPAR_CLOCK_HIGH,FAST;
  .+PulseWidth: SET GA2B TO _GPAR_CLOCK_LOW,FAST;
  .+PulsePeriod: SET GA3B TO _GPAR_CLOCK_HIGH,FAST;
  .+PulseWidth: SET GA3B TO _GPAR_CLOCK_LOW,FAST;
  .+PulsePeriod: SET SFPClock1 TO _GPAR_CLOCK_HIGH,FAST;
  .+PulseWidth: SET SFPClock1 TO _GPAR_CLOCK_LOW,FAST;
  .+PulsePeriod: SET SFPClock2 TO _GPAR_CLOCK_HIGH,FAST;
  .+PulseWidth: SET SFPClock2 TO _GPAR_CLOCK_LOW,FAST;
  .+PulsePeriod: SET SFPClock3 TO _GPAR_CLOCK_HIGH,FAST;
  .+PulseWidth: SET SFPClock3 TO _GPAR_CLOCK_LOW,FAST;
  .+PulsePeriod: RETURN;
}

WAVEFORM GSerialReadRight {
 0:	=StartSShift	SET RSClock1  TO _GSER_CLOCK_LOW, FAST;
                        SET RSClock2  TO _GSER_CLOCK_HIGH, FAST;
                        SET RSClock3  TO _GSER_CLOCK_LOW, FAST;
                        SET SW       TO _GSW_CLOCK_LOW, FAST;
                        SET RG       TO _RG_CLOCK_HIGH, FAST;    /* This is a clock signal for guider/focus */
                        SET PIXEL    TO High;
 .+TICK:                SET PIXEL    TO Low;
                        SET FRAME    TO Low;
			SET LINE     TO Low;
 .+RGDELAY:		SET RG	     TO _RG_CLOCK_LOW, FAST;
 .+ARGDELAY:		SET RSClock3  TO _GSER_CLOCK_HIGH, FAST;
 .+SDELAY:		SET RSClock2  TO _GSER_CLOCK_LOW, FAST;  /* Charge is all under phase3L, phase1R */
 .+SDELAY:		SET RSClock1  TO _GSER_CLOCK_HIGH, FAST; /* Charge under 3L,1L, 1R,3R            */
			SET SW        TO _GSW_CLOCK_HIGH, FAST;   /* And SW for both R and L              */
 .+SDELAY:		SET RSClock3  TO _GSER_CLOCK_LOW, FAST;  /* Under 1L and SW, 3R and SW           */
 .+SDELAY:		SET RSClock2  TO _GSER_CLOCK_HIGH,FAST;
                        /* SET SW        TO _GSW_CLOCK_HIGH, FAST;*/ /* Set the SW with Serial 2 phase */
 .+SDELAY:		SET RSClock1  TO _GSER_CLOCK_LOW, FAST;
                        /*.+SDELAY:	*/	SET SW       TO _GSW_CLOCK_LOW, FAST; /* Now we have charge signal to read */
                        /* .+SDELAY:              SET SW       TO _GSW_CLOCK_HIGH, FAST; */
 .+SIGDELAY:              RETURN;                   
}

WAVEFORM GSerialReadRightReversed {
 0:	=StartSShift    SET RSClock1  TO _GSER_CLOCK_LOW, FAST;
                        SET RSClock2  TO _GSER_CLOCK_LOW, FAST;
                        SET RSClock3  TO _GSER_CLOCK_HIGH, FAST;
                        SET SW       TO _GSW_CLOCK_HIGH, FAST;
                        SET RG       TO _RG_CLOCK_HIGH, FAST;    /* This is a clock signal for guider/focus */
                        SET PIXEL    TO High;
 .+TICK:                SET PIXEL    TO Low;
                        SET FRAME    TO Low;
			SET LINE     TO Low;
 .+RGDELAY:		SET RG	     TO _RG_CLOCK_LOW, FAST;
 .+ARGDELAY:		SET RSClock1  TO _GSER_CLOCK_HIGH, FAST;
 .+SDELAY:		SET RSClock3  TO _GSER_CLOCK_LOW, FAST;  /* Charge is all under phase3L, phase1R */
 .+SDELAY:		SET RSClock2  TO _GSER_CLOCK_HIGH, FAST; /* Charge under 3L,1L, 1R,3R            */
			SET SW        TO _GSW_CLOCK_HIGH, FAST;   /* And SW for both R and L              */
 .+SDELAY:		SET RSClock1  TO _GSER_CLOCK_LOW, FAST;  /* Under 1L and SW, 3R and SW           */
 .+SDELAY:		SET RSClock3  TO _GSER_CLOCK_HIGH,FAST;
                        SET SW        TO _GSW_CLOCK_LOW,FAST; /* Now we have charge signal to read */
                        .+SDELAY: SET SW TO _GSW_CLOCK_LOW,FAST;
                        .+SIGDELAY:              RETURN;                   
}

WAVEFORM GSerialReadLeft {
0:	=StartSShift	SET LSClock1  TO _GSER_CLOCK_LOW, FAST;
                        SET LSClock2  TO _GSER_CLOCK_HIGH, FAST;
                        SET LSClock3  TO _GSER_CLOCK_LOW, FAST;
                        SET SW       TO _GSW_CLOCK_LOW, FAST;
                        SET RG       TO _RG_CLOCK_HIGH, FAST;    /* This is a clock signal for guider/focus */
                        SET PIXEL    TO High;
 .+TICK:                SET PIXEL    TO Low;
                        SET FRAME    TO Low;
			SET LINE     TO Low;
 .+RGDELAY:		SET RG	     TO _RG_CLOCK_LOW, FAST;
 .+ARGDELAY:		SET LSClock3  TO _GSER_CLOCK_HIGH, FAST;
 .+SDELAY:		SET LSClock2  TO _GSER_CLOCK_LOW, FAST;  /* Charge is all under phase3L, phase1R */
 .+SDELAY:		SET LSClock1  TO _GSER_CLOCK_HIGH, FAST; /* Charge under 3L,1L, 1R,3R            */
			SET SW        TO _GSW_CLOCK_HIGH, FAST;  /* And SW for both R and L              */
 .+SDELAY:		SET LSClock3  TO _GSER_CLOCK_LOW, FAST;  /* Under 1L and SW, 3R and SW           */
 .+SDELAY:		SET LSClock2  TO _GSER_CLOCK_HIGH,FAST;
 .+SDELAY:		SET LSClock1  TO _GSER_CLOCK_LOW, FAST;
			SET SW       TO _GSW_CLOCK_LOW, FAST; /* Now we have charge signal to read */
                        /* .+SDELAY:              SET SW       TO _GSW_CLOCK_HIGH, FAST; */
 .+SIGDELAY:              RETURN;                   
}

WAVEFORM Wait1ms {
 1ms:			RETURN;
}

WAVEFORM Wait1us {
 100:			RETURN;
}
WAVEFORM Wait10ns{
 1: RETURN;
}

WAVEFORM OpenBLC {
 0:			SET GBLOS    TO BLOpen;
                        SET GBLDOS   TO BLOpen; /* Make single ended for testing */
			SET FBLOS    TO BLOpen;
			SET FBLDOS   TO BLOpen; /* Make single ended for testing */
}

WAVEFORM GroundBLC {
 0:			SET GBLOS    TO BLClose;
                        SET GBLDOS   TO BLClose;
			SET FBLOS    TO BLClose;
			SET FBLDOS   TO BLClose;
}


/*****************************************/
/* Here are the control signal waveforms */
/*****************************************/

WAVEFORM wOpenShutter {
 0:			SET SHUTTER TO OPEN;
}
WAVEFORM wCloseShutter {
 0:			SET SHUTTER TO CLOSE;
}
WAVEFORM wFrame {
 0:			SET FRAME TO High;
}
WAVEFORM wLine {
 0:			SET LINE TO High;
}
WAVEFORM wPixel {
 0:			SET PIXEL   TO High;
 .+TICK:		SET PIXEL   TO Low;
			SET FRAME   TO Low;
			SET LINE    TO Low;
 .+TICK:                SET SHUTTER TO CLOSE;
}

WAVEFORM ADClamp {
0:			SET AD5     TO High;
			SET AD6     TO High;
}

WAVEFORM ADClamp_ {
 0:			SET AD5     TO Low;
			SET AD6     TO Low;
}
