/* -*- C -*- */
/** ---------------------------------------------------------------------------
 * @file     nullClocking.seq
 * @brief    sequence test file for ZTF - no clocking noise test
 * @author   Stephen Kaye
 * @date     2016-03-01
 * @modified 2016-03-01 SK
 *
 */

/** ---------------------------------------------------------------------------
 * parameter definitions
 * syntax: param paramname=value
*/

param exptime=0
param Expose=0
param Readout=0
param shutterdelay=_SHDEL
param SweepCount=0
param SerialPrescan=_SERIALPRESCAN
param SerialOverscan=_SERIALOVERSCAN
param ParallelOverscan=_PARALLELOVERSCAN
param ImageCols=_IMAGECOLS
param ImageRows=_IMAGEROWS
param SplitLines=_LINES_PER_TAP
param Lines=_LINES_PER_TAP
param Pixels=_PIXELS_PER_TAP
param RemainingLines=0

/** ---------------------------------------------------------------------------
 * @fn     MAIN
 * @brief  the main loop.  MAIN is implicitly an infinite loop.
 *
 */
SEQUENCE Start {
  wCloseShutter();
  SerialReceiving();      /* Put serials at nominal voltages   */
  SynchedLineTransfer();  /* Put parallels at nominal voltages */

  /* Start with a reset of the sense node and clamping to that level */
  wReset();
  Wait1us();
  wUnsetReset();
  GroundBLC();
  ADClamp();
  Wait1us();
  OpenBLC();
  ADClamp_();

  /*wDumpGateOn();*/
  /*wParallelInversion();*/
  /*wDumpGateOff();*/           /* suppresses the waffle pattern */
  Idling(IdleLines);                 /* clears the residual badness */
}

SEQUENCE WaitForExpose {
  Idling();
  if Expose DoExpose();
  GOTO WaitForExpose();
}

SEQUENCE WaitForReadout {
  if Readout DoScienceReadout();
  GOTO WaitForReadout();
}

/** ---------------------------------------------------------------------------
 * @fn	    Idling
 * @brief   Idle sequence to push one parallel line and read the full serial register
 */
SEQUENCE Idling {
  /*wDumpGateOn();*/
  wReset();                       /* Turn on reset to take away any charge to the sense node */
  /*SynchedLineTransfer(IdleLines);*/ /* Idle... to invert parallel shifting */
  SynchedLineTransfer();
  /*wAllSerialLow();*/
  /*Wait25us();*/
  /*wDumpGateOff();*/
  /*Wait25us();*/
  FastSerialOutputClocking(Pixels); /* Clock out any charge swept into the serial */
    /*SerialOutputClocking(Pixels);*/
  /* Now go to nominal clock levels for the serial */
  SerialReceiving();

  /* Do a reset sequence */
  wReset();
  Wait1us();
  wUnsetReset();
  GroundBLC();
  ADClamp();
  Wait1us();
  OpenBLC();
  ADClamp_();

  return;
}

/** ---------------------------------------------------------------------------
 * @fn     DoExpose
 * @brief  start an exposure
 *
 */
SEQUENCE DoExpose {
  Expose--;
  if exptime wOpenShutter();
  if exptime MilliSec(exptime);
  if exptime wCloseShutter();
  GOTO WaitForReadout(); 
}

SEQUENCE MilliSec {
  Wait1ms();	/* This is a placeholder 1ms routine - Need to fix up */
  return;
}

SEQUENCE DoShutterDelay {
  Wait1ms();
  return;
}

SEQUENCE DoScienceReadout {
  Readout--;
  FastSerialOutputClocking(Pixels);
    /*SerialOutputClocking(Pixels);*/
  SerialReceiving();

  wFrame();
  ScienceRead(SplitLines);
  GOTO WaitForExpose();
  /* return; */
}

SEQUENCE ScienceRead {
  /*SynchedLineTransfer();*/
  DummyLineTransfer();

  wLine();

  /* Just use one readout speed */
  DummySerialOutputClocking(Pixels);
  /*RawPixel(Pixels);*/

  /* Need a final reset so that we clamp on a reset level and not
     on a charge signal level */
  wReset();
  Wait1us();
  wUnsetReset();
  GroundBLC();
  ADClamp();
  Wait1us();
  OpenBLC();
  ADClamp_();

  return;
}
