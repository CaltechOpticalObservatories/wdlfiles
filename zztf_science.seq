/* -*- C -*- */
/** ---------------------------------------------------------------------------
 * @file     ztf_science.seq
 * @brief    sequence file for ZTF
 * @author   Stephen Kaye
 * @date     2016-04-07
 * @modified 2016-04-07 SK
 *
 */

/** ---------------------------------------------------------------------------
 * parameter definitions
 * syntax: param paramname=value
*/

param exptime=0 
param Expose=0
param Readout=0
param Abort=0
param TrigLowThisLine=1
param ShutterEnable=1
param RoiReadout=0
param shutdelay=_SHDEL
param SweepCount=0
param SerialPrescan=_SERIALPRESCAN
param SerialOverscan=_SERIALOVERSCAN
param ParallelOverscan=_PARALLELOVERSCAN
param ImageCols=_IMAGECOLS
param ImageRows=_IMAGEROWS
param SplitLines=_LINES_PER_TAP
param Lines=_LINES_PER_TAP
param Pixels=_PIXELS_PER_TAP
param PxByFour=_PIXBYFOUR
param IdleLines=_IDLE_LINES
param FullPixels=6244
param ST=19
param RGH=30
param RGL=30
param SWH=30
param SWL=30
param SHP=30
param SHD=30
param FauxFlag=0
param FauxPixels=_PIXELS_PER_TAP
param FauxLines=_LINES_PER_TAP
param PartialLines=385
param MedLines=385
param LowLines=385
param ZeroLines=385
param rev=0
param RoiLineStart=0
param RoiLines=0
param RemainingLines=0
param PSplit=1
param PUp=0
param PDown=0
param SSplit=0
param SRight=0
param SLeft=0
param NotFast=0
param GoFast=1
param Guiding=0
#define defIdleLines #eval _LINES_PER_TAP*2
#define SingleSerial #eval _PIXELS_PER_TAP*2

/** ---------------------------------------------------------------------------
 * @fn     MAIN
 * @brief  the main loop.  MAIN is implicitly an infinite loop.
 *
 */
SEQUENCE Start {
  wCloseShutter();
  SerialReceiving();      /* Put serials at nominal voltages   */
  SynchedLineTransfer();  /* Put parallels at nominal voltages */

  /* Start with a reset of the sense node and clamping to that level */
  wReset();
  Wait1us();
  wUnsetReset();

  /*GroundBLC();
  Wait1us(100);
  OpenBLC();
  ADClamp();
  Wait1us(100);
  ADClamp_();*/

  GroundBLC();
  ADClamp();
  Wait1us();
  OpenBLC();
  ADClamp_();

  Idling(); /*Idling(IdleLines);*/                 /* clears the residual badness */
  Idling(); /*Idling(IdleLines);*/
  wOutAmpsLow();  /* Turn off the on-chip amps before waiting for exposure */
}

SEQUENCE WaitForExpose {
  Abort--;
  /*if Expose GOTO DoExpose();*/
  if Expose DoExpose(); /* Use this for direct readout */
  Idling();

  /* This is only for a test shutter signal */
  /*wOpenShutter();
  Wait1us(10);
  wCloseShutter();*/
  /* End test shutter signal */
  
  /*wCloseShutter();*/ /* For ramped illumination */
  /*DoScienceReadout();*/  /***/
  /*return;*/              /***/
  GOTO WaitForExpose();
}

SEQUENCE WaitForReadout {
  if Readout DoScienceReadout();
  GOTO WaitForReadout();
}


/** ---------------------------------------------------------------------------
 * @fn	    Idling
 * @brief   Idle sequence to push one parallel line and read the full serial register
 */
SEQUENCE Idling {
                 /*  wOutAmpsLow();*/
  ReadLineConcurrently();

  /*SynchedLineTransfer();*/ /* Idle... to invert parallel shifting */
  /*TPixel(Pixels);*/
  /* Now go to nominal clock levels for the serial */
  SerialReceiving();

  /* Do a reset sequence */
  wReset();
  Wait1us();
  wUnsetReset();

  /*GroundBLC();
  Wait1us(100);
  OpenBLC();
  ADClamp();
  Wait1us(100);
  ADClamp_();*/

  
  GroundBLC();
  ADClamp();
  Wait1us();
  OpenBLC();
  ADClamp_();

  return;
}

/** ---------------------------------------------------------------------------
 * @fn     DoExpose
 * @brief  start an exposure
 *
 */
SEQUENCE DoExpose {
  Expose--;
  /* if exptime wOutAmpsLow(); */ /* Amps are off at this point anyway */
  SetParallelExpose();
  /*wOutAmpsHigh();*/
  if ShutterEnable OpenShutter();      // don't even try to open shutter unless enabled
  if exptime MilliSec(exptime);
  wCloseShutter();
  /*wOpenShutter();*/ /* Just for a ramped illumination */

  /* Comment out for shutter phase test */
  wOutAmpsHigh(); /***/  /* Turn amplifiers back on for readout */
  
  /*SetParallelTransfer();*/ /***/  /* These two lines are for shift then squeeze */
  /*SetParallelTransferConcurrent();*/ /***/  /* These two lines are for shift then squeeze */
  /* The following two lines are for squeeze then shift */
  /* Comment the squeeze then shift out when doind the dither */
  /*TwoPhaseStorageExp();*/   /**/ /* Test of dither hypothesis */ /* With EXP clock levels store charge under two phases */
  /*SetPTwoPhaseTransfer();*/ /**/ /* Test of dither hypothesis */  /* Set to clocking voltage levels */

  /* This is the dither routine */ /**/ /* Test of dither hypothese (comment out) */
  /* We'll take this out for shutter phase test */
  DitherTwoPhaseExp();       /* Store under AB 1,2 and CD 3,4          */
  DitherTwoPhaseTransfer();  /* Move stored charge to transfer levels  */
  DoShutterDelay(100);       /* Keep charge in two phases for 100 ms   */
  DitherOtherHalf();         /* Move stored charge to other two phases */
  DoShutterDelay(100);       /* Keep charge in two phases for 100 ms   */
  ReadyForReadout();         /* Get charge ready to read out           */

  /* This will disable the dump gate for proper readout */
  /*wDumpGateOff();  */
  /*SerialReceiving(); */
  /* End disable the dump gate */

  /* Comment out for the shutter phase test */
  Wait1us(849);
  wIdle(97);    /* Comment out when dump gate included */
  /*wIdle(54);*/    /* For dump gate included */
  if exptime DoShutterDelay(84);  /* Down to 64 when dump gate included */


  /* Clamp the signals now and will unclamp just before reading out */
  /* Comment out for triggered readout */
  DoScienceReadout();
  return;             /***/
  /* end comment out */
  
  /*GOTO WaitForReadout();*/ /* uncomment for trig readout */
}

SEQUENCE OpenShutter {
  if exptime wOpenShutter();           // only fire open shutter waveform for non-zero exposure times
  return;
}

SEQUENCE MilliSec {
  Wait1ms();	/* This is a placeholder 1ms routine - Need to fix up */

  /* This section is for the shutter open/close test */
  /* make exptime = 3 seconds and we'll see where we are */
  /* Illumination should stay on the whole time          */
  /*Wait1us(449);*/
  /*Wait10ns(89);*/
  /*SetParallelTransfer();*/    /* Got to clocking levels */ /***/
  /*SetParallelTransferConcurrent();*/ /* Squeeze to two phases */ /***/
  /*/*SynchedLineTransferNEW();*/ /* Do a line transfer */ /***/
  /*SynchedLineTransferNEW();*/ /* Do a line transfer */ /***/
  /*SetParallelExpose();*/ /* Go back to exposure levels */ /***/
  /* End shutter phase test */
  if Abort GOTO DoAbort();  /* This is the test for an abort  */
  return;
}

SEQUENCE DoAbort {
  Abort--;
  GOTO WaitForExpose();
}

SEQUENCE DoShutterDelay {
  Wait1ms();  /***/
  /*Wait1us(449);*/ /***/
  /*Wait10ns(90);*/
  /*SetParallelTransfer();*/    /* Got to clocking levels */ /***/
  /*SetParallelTransferConcurrent();*/ /* Squeeze to two phases */ /***/
  /*/*SynchedLineTransferNEW();*/ /* Do a line transfer */ /***/
  /*SynchedLineTransferNEW();*/ /* Do a line transfer */ /***/
  /*SetParallelExpose();*/ /* Go back to exposure levels */ /***/
  return;
}

SEQUENCE DoFlush {
  SerialReceiving();
  if PSplit SynchedLineTransfer(SplitLines);
  if PUp ParallelUp(SplitLines);
  if PDown ParallelDown(SplitLines);

  if SSplit SerialOutputClocking(Pixels);
  if SRight RightSerialOutputClocking(Pixels);
  if SLeft  LeftSerialOutputClocking(Pixels);

  return;
  /* GOTO MAIN; */
}

SEQUENCE DoScienceReadout {
  /*wOpenShutter();*/
  Readout--;                                                     /*   0.01us*/
  /*SetParallelTransfer();*/                                         /*   0.01 us*/
  /*SetParallelTransferConcurrent();*/  /* Move Integrated charge to AB3 and CD4 here */
  /*TPixel(Pixels);*/ /* initial serial sweepout */
  TPixel(3152); /****/ /* For first line test (commented out) */
  SerialReceiving();                                             /*   0.21 us*/

/* Do a clamp and reset since things were sitting during exposure and waiting for readout */
/* This is an attempt to make the first line the same as other lines */
  wReset();
  Wait1us();
  wUnsetReset();  /* Do we move this until the end of the BLC and ADC Clamps? */

  /*GroundBLC();
  Wait1us(100);
  OpenBLC();
  ADClamp();
  Wait1us(100);
  ADClamp_();*/

  GroundBLC();    /* Is this correct order for BLC and ADC clamp, does order matter? */
  ADClamp();
  Wait1us();
  OpenBLC();
  ADClamp_();
  
  wFrame();                                                      /*   0.01 us*/
  /* This is only for a test shutter signal */
  /*wOpenShutter();
  Wait1us(10);
  wCloseShutter();*/
  /* End test shutter signal */

  /*ScienceRead(SplitLines);*/                                       /*3257.65 us*/
  /*wLine();            */ /****/ /* For first line test */
  /*InitialClock2Low(); */ /****/ /* For first line test */
  /*TPixel(3152);       */ /****/ /* For first line test */
  /*ScienceRead(3079);  */ /****/ /* For first line test */
  ScienceRead(3080); /****/ /* For first line test (commented out) */
  SerialReceiving();   /* Put serial clocks in ready for charge state after readout */                                                               /*   0.21 us*/
  /*return;*/
  /* Clamp before turning amp off */
  /*GroundBLC();*/    /* Is this correct order for BLC and ADC clamp, does order matter? */
  /*ADClamp();*/
  
  wOutAmpsLow(); /***/  /* Turn the amps down when in idle */
  /* This will enable the dump gate */
  /*wDumpGateOn();  */  /* Can take these out, they don't really help */
  /*wAllSerialLow();*/  /* Can take these out, they don't really help */
  /* End enable the dump gate */
  /* Comment out for triggered readout */
  return;   /***/
  /* end comment out */
  /*GOTO WaitForExpose();*/ /* uncomment for trig readout */   /*   0.01 us?*/
}

 
SEQUENCE ScienceRead {
  /* Commented out due to concurrent clocking */
  /*SynchedLineTransfer();*/  /* Parallel shift */
  
  wLine();
  /* Replaces SynchedLineTransfer for concurrent clocking */
  ReadLineConcurrently();

  /* The first pixel is a junk pixel and then we get the dark pixels, not sure why */
  /* To avoid the junk pixel try putting in one PixelShift before reading pixels */
  /* PixelShift is the same as TPixel except no control signals, therefore, no conversion */
  /*InitialClock2Low();
    TPixel(Pixels);*/

  SerialReceiving();  /* This puts phase 1 and 2 high and reset gate high */
  /* Need a final reset so that we clamp on a reset level and not
     on a charge signal level */
  wReset();
  Wait1us();
  wUnsetReset();  /* Do we move this until the end of the BLC and ADC Clamps? */
  GroundBLC();    /* Is this correct order for BLC and ADC clamp, does order matter? */
  ADClamp();
  Wait1us();
  OpenBLC();
  ADClamp_();

  return;
}

SEQUENCE LineOutA {
  fastTGa();
  FastSerialOutputClocking(PxByFour);
  step1a();
  FastSerialOutputClocking(PxByFour);
  step2a();
  FastSerialOutputClocking(PxByFour);
  step3a();
  FastSerialOutputClocking(PxByFour);
  return;
}

SEQUENCE ReadLineConcurrently {
  LoadSerialRegister();
  InitialClock2Low();       /* After receiving charge get it under 1 phase */
  P23to34();                /* Charge under AB3,AB4   CD4,CD1 */
  TPixel(NumReads);
  P34to41();                /* Charge under AB4,AB1   CD1,CD2 */
  TPixel(NumReads);
  P41to12();                /* Charge under AB1,AB2   CD2,CD3 */
  TPixel(NumReads);
  P12to23();                /* Charge under AB2,AB3   CD3,CD4 */
  TPixel(NumReads);
  return;
}

SEQUENCE DoRoiScienceReadout {
  RoiReadout--;
  SerialReceiving();

  wFrame();
  RoiScience(RoiLines);  /* Read the number of interesting lines */
  if PSplit SynchedLineTransfer(RemainingLines); /* Flush out the remaining lines */
  if PUp ParallelUp(RemainingLines);
  if PDown ParallelDown(RemainingLines);

  if SSplit SerialOutputClocking(Pixels);
  if SRight RightSerialOutputClocking(Pixels);
  if SLeft  LeftSerialOutputClocking(Pixels);
  return;
}

SEQUENCE RoiScience {
  if PSplit SynchedLineTransfer();
  if PUp ParallelUp();
  if PDown ParallelDown();
  OpenBLC();
  ADClamp_();
  wLine();

  if SSplit SerialOutputClocking(Pixels);
  if SRight RightSerialOutputClocking(Pixels);
  if SLeft  LeftSerialOutputClocking(Pixels);

  GroundBLC();
  ADClamp();
  return;
}
