/* -*- C -*- */
/** ---------------------------------------------------------------------------
 * @file   deimos_science.wavform
 * @brief  DEIMOS timing file; rules for waveform generation and scripting
 *
 * syntax (is case sensitive):
 *
 * WAVEFORM waveformlabel { rules }
 *
 * where rules (enclosed in curly braces) are as follows:
 *
 * [time]: [=timelabel] SET signallabel TO level;
 *
 * time: at least one time label is required, followed by colon
 *       (if omitted then SET... lines are all at the same time as previous time)
 *       arithmetic operations are allowed for time
 *       units are allowed to follow numbers, E.G. ns, us, ms
 *       ".+" means to add to the previous time
 *
 * =timelabel is an optional label for this time, which can be used elsewhere
 *
 * SET signallabel TO level; 
 * is required and must end with a semi-colon
 * signallabel and level can be defined anywhere
 *
 */

#include voltage_timing_parameters.h

/*****************************************/
/*             LOGIC STATES              */
/*****************************************/
#define OPEN  1
#define CLOSE 0
#define HIGH  1
#define LOW   0

#define INV_HIGH 0 //Some signals are inverted. Use this sigil to indicate that
#define INV_LOW 1



/*
WAVEFORM SerialRecieving {
 0: 		SET SCI_SCLK1	TO _SER_CLOCK_RCV, FAST;
			SET SCI_SCLK2	TO _SER_CLOCK_RCV, FAST;
 .+SCLK_RCV_RESET:	SET RG	TO LOW;
}
*/

/*****************************************/
/*         ARCHON Timing Control         */
/*****************************************/

WAVEFORM Wait1us {
 0: 	SET NOP TO HIGH;
 .+1us:	RETURN;
}

WAVEFORM Wait1ms {
 0:   SET NOP TO HIGH;
 .+1ms: RETURN;
}

/* WAVEFORM Wait1s { */
/*  0: SET NOP TO HIGH; */
/*  .+1s: RETURN; */
/* } */

WAVEFORM KeepThisFrame {
 0: SET FRAME TO HIGH;
}


/*****************************************/
/*       Integration related waveforms   */
/*****************************************/

#define PAR_SLEW_TIME_TICKS #eval PAR_SLEW_TIME_US * 100
#define SER_SLEW_TIME_TICKS #eval SER_SLEW_TIME_US * 100


WAVEFORM FirstTimeSetup {
 0: 
  SET SCI_PCLK3 TO HIGH, SLOW;
  SET SCI_PCLK1 TO LOW, SLOW;
  SET SCI_PCLK2 TO LOW, SLOW;
  SET AC_Clamp TO LOW;
  SET SW TO 1;
  SET RG TO 1;
  SET SCI_SCLK1 TO _SER_CLOCK_RCV, FAST;
  SET SCI_SCLK2 TO _SER_CLOCK_RCV, FAST;
  SET SCI_SCLK3 TO _SER_CLOCK_LOW, FAST;
  SET TG TO _TG_CLOCK_LOW, FAST;
  
  .+PAR_SLEW_TIME_TICKS: SET NOP TO HIGH;
}


WAVEFORM SetupIntegration {
 0: 
  SET SCI_PCLK3 TO HIGH, SLOW;
  SET SCI_PCLK1 TO LOW, SLOW;
  SET SCI_PCLK2 TO LOW, SLOW;
  .+PAR_SLEW_TIME_TICKS:
  SET SHUTTER TO OPEN;
}

WAVEFORM TearDownIntegration {
 0: SET SHUTTER TO CLOSE;
}

WAVEFORM ReadoutBegin
{
  SET LINE TO HIGH;
}


WAVEFORM TransferToSerialRegisterBegin
{
  //set serials to receive charge
 0:=BEGIN SET SCI_SCLK1 TO _SER_CLOCK_RCV, FAST;
    SET SCI_SCLK2 TO _SER_CLOCK_RCV, FAST;
    SET SCI_SCLK3 TO _SER_CLOCK_LOW, FAST;
 .+1000:=TGUP SET TG TO _TG_CLOCK_HIGH, FAST;
    //simultaneously, operate the AC clamp
    BEGIN: SET AC_Clamp to HIGH;

}


WAVEFORM TransferToSerialRegisterEnd
{
  
 0:SET NOP TO HIGH;

  .+1000:=END_RECV SET TG TO _TG_CLOCK_LOW, FAST;
    SET SCI_SCLK1 TO _SER_CLOCK_HIGH, FAST;
    SET SCI_SCLK2 TO _SER_CLOCK_LOW, FAST;
    SET LINE TO HIGH;
    END_RECV+AC_CLAMP_EXTRA_RECOVER: SET AC_Clamp TO LOW;
}



//waveforms for coincident (triangular) parallel clocking
WAVEFORM ParallelForwardSegment1
{
  //NOTE: after integration, if done properly
  //all charge should be under SCI_PCLK3
  // the transfer to serial reg is done before this happens
 0: SET SCI_PCLK3 to _PAR_CLOCK_LOW, SLOW;
    SET SCI_PCLK1 to _PAR_CLOCK_HIGH, SLOW;
}

WAVEFORM ParallelForwardSegment2
{
 0: SET SCI_PCLK1 TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK2 TO _PAR_CLOCK_HIGH, SLOW;
}

WAVEFORM ParallelForwardSegment3
{
 0: SET SCI_PCLK2 TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK3 TO _PAR_CLOCK_HIGH, SLOW;
}

WAVEFORM ReadPixels
{
  //NB using slow slew rate for triangular serial clockingdef
 0:=PIX_BEGIN
    SET PIXEL  TO HIGH;
  .+1: SET PIXEL TO LOW;
       SET LINE TO LOW;
       SET FRAME TO LOW;
  
       //reset pulse at the start of the pixel
    SET RG TO INV_HIGH; //NOTE reset gate is inverted
    PIX_BEGIN+RG_settleT: SET RG to INV_LOW;


  //triangular serial clocks, running as they please
 0: SET SCI_SCLK2 TO _SER_CLOCK_HIGH, SLOW;
  SET SCI_SCLK1 TO _SER_CLOCK_LOW, SLOW;
  .+SER_SLEW_TIME_TICKS:=CHARGE_UNDER_SCK2
  SET SCI_SCLK3 TO _SER_CLOCK_HIGH, SLOW;
  SET SCI_SCLK2 TO _SER_CLOCK_LOW, SLOW;
  .+SER_SLEW_TIME_TICKS:=CHARGE_UNDER_SCK3
  SET SCI_SCLK1 TO _SER_CLOCK_HIGH, SLOW;
  SET SCI_SCLK3 TO _SER_CLOCK_LOW, SLOW;
  .+SER_SLEW_TIME_TICKS:
  SET NOP TO HIGH;

  //at the point where charge is under SCLK2, delay by a small amount then
  //let SW RIP

 CHARGE_UNDER_SCK2:
  SET SW TO INV_HIGH;
  .+SW_settleT:
  SET SW TO INV_LOW;
  //at this point the charge has plopped over the OG and is in the node.
  //should readout here
}

#define PCLK_NOREAD_DELAY 

//definitions for llel total deferred charge measurement
WAVEFORM ForwardParallelSectionA
{
 0: SET SCI_PCLK3_A to _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK1_A to _PAR_CLOCK_HIGH, SLOW;
  PAR_SLEW_TIME_US*100: SET SCI_PCLK1_A to _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK2_A TO _PAR_CLOCK_HIGH, SLOW;
  2*PAR_SLEW_TIME_US*100: SET SCI_PCLK2_A TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK3_A TO _PAR_CLOCK_HIGH, SLOW;
}

WAVEFORM ForwardParallelSectionB
{
 0: SET SCI_PCLK3_B TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK1_B TO _PAR_CLOCK_HIGH, SLOW;
  PAR_SLEW_TIME_US*100: SET SCI_PCLK1_B TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK2_B TO _PAR_CLOCK_HIGH, SLOW;
  2*PAR_SLEW_TIME_US*100: SET SCI_PCLK2_B TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK3_B TO _PAR_CLOCK_HIGH, SLOW; 
}

WAVEFORM ForwardParallelAll
{
   0: SET SCI_PCLK3 TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK1 TO _PAR_CLOCK_HIGH, SLOW;
  PAR_SLEW_TIME_US*100: SET SCI_PCLK1 TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK2 TO _PAR_CLOCK_HIGH, SLOW;
  2*PAR_SLEW_TIME_US*100: SET SCI_PCLK2 TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK3 TO _PAR_CLOCK_HIGH, SLOW;
}


WAVEFORM ParallelForwardSectionASegment1
{
 0: SET SCI_PCLK3_A to _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK1_A to _PAR_CLOCK_HIGH, SLOW;
}

WAVEFORM ParallelForwardSectionASegment2
{
  0: SET SCI_PCLK1_A to _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK2_A TO _PAR_CLOCK_HIGH, SLOW;
}

WAVEFORM ParallelForwardSectionASegment3
{
  0: SET SCI_PCLK2_A TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK3_A TO _PAR_CLOCK_HIGH, SLOW;
}


//definitions for serial total deferred charge measurement


//readout only clocking the E register (we have stored bright edge in the F for this one)
WAVEFORM ReadPixelsEOnly
{
  //NB using slow slew rate for triangular serial clocking
 0:=PIX_BEGIN
  //SW and RG are on LVDS  signals
    SET RG TO INV_HIGH; //NOTE reset gate is inverted

  PIX_BEGIN+RG_settleT: SET RG to INV_LOW;
  SET PIXEL TO HIGH;
  .+1:=CDS_RESET_BEGIN SET PIXEL TO LOW;
  SET LINE TO LOW;
    SET FRAME TO LOW;
  //serials COINCIDENT, start moving charge immediately
  //when CDS reset begins
  SET SCI_SCLK2_EONLY TO _SER_CLOCK_LOW, SLOW;
  SET SCI_SCLK3 TO _SER_CLOCK_HIGH, SLOW;
  SET SW TO INV_HIGH;

  .+SW_settleT: SET SW TO INV_LOW;


  CDS_RESET_BEGIN + 


  //now we're in the CDS signal period begin triangular shuffling serials again
  CDS_RESET_BEGIN+CDS_RESET_LENGTH: SET SCI_SCLK3 TO _SER_CLOCK_LOW, SLOW;
  SET SCI_SCLK1_EONLY TO _SER_CLOCK_HIGH, SLOW;

  .+CDS_SIGNAL_LENGTH: SET SCI_SCLK1_EONLY TO _SER_CLOCK_LOW, SLOW;
  SET SCI_SCLK2_EONLY TO _SER_CLOCK_HIGH, SLOW;
}


//similarly, read out only clocking the F register
WAVEFORM ReadPixelsFOnly
{
  //NB using slow slew rate for triangular serial clocking
 0:=PIX_BEGIN
  //SW and RG are on LVDS  signals
    SET RG TO INV_HIGH; //NOTE reset gate is inverted

  PIX_BEGIN+RG_settleT: SET RG to INV_LOW;
  SET PIXEL TO HIGH;
  .+1:=CDS_RESET_BEGIN SET PIXEL TO LOW;
  SET LINE TO LOW;
    SET FRAME TO LOW;
  //serials COINCIDENT, start moving charge immediately
  //when CDS reset begins
  SET SCI_SCLK2_FONLY TO _SER_CLOCK_LOW, SLOW;
  SET SCI_SCLK3 TO _SER_CLOCK_HIGH, SLOW;

  //...except the summing wells at the output which we pulse just when we
  //finish CDS first integration period
  CDS_RESET_BEGIN+COINC_SW_DELAY:=SWPULSE_START SET SW TO INV_HIGH; //NOTE: summing well is inverted
  SWPULSE_START+SW_settleT: SET SW TO INV_LOW;

  //now we're in the CDS signal period begin triangular shuffling serials again
  CDS_RESET_BEGIN+CDS_RESET_LENGTH: SET SCI_SCLK3 TO _SER_CLOCK_LOW, SLOW;
  SET SCI_SCLK1_FONLY TO _SER_CLOCK_HIGH, SLOW;

  .+CDS_SIGNAL_LENGTH: SET SCI_SCLK1_FONLY TO _SER_CLOCK_LOW, SLOW;
  SET SCI_SCLK2_FONLY TO _SER_CLOCK_HIGH, SLOW;
}

//use this to move charge from F register back into E register
WAVEFORM SerialFBackwards
{
 0: SET SCI_SCLK2_FONLY TO _SER_CLOCK_LOW, SLOW;
    SET SCI_SCLK1_FONLY TO _SER_CLOCK_HIGH, SLOW;
 CDS_RESET_BEGIN+CDS_RESET_LENGTH:
    SET SCI_SCLK1_FONLY TO _SER_CLOCK_LOW, SLOW;
    SET SCI_SCLK3  TO _SER_CLOCK_HIGH, SLOW;

    .+CDS_SIGNAL_LENGTH: SET SCI_SCLK3 TO _SER_CLOCK_LOW, SLOW;
    SET SCI_SCLK2_FONLY TO _SER_CLOCK_HIGH, SLOW;
}

//use this to move charge from E register back into F register
WAVEFORM SerialEBackwards
{
 0: SET SCI_SCLK2_EONLY TO _SER_CLOCK_LOW, SLOW;
  SET SCI_SCLK1_EONLY TO _SER_CLOCK_HIGH, SLOW;

  CDS_RESET_BEGIN+CDS_RESET_LENGTH:
  SET SCI_SCLK1_EONLY TO _SER_CLOCK_LOW, SLOW;
  SET SCI_SCLK3 TO _SER_CLOCK_HIGH, SLOW;

  .+CDS_SIGNAL_LENGTH: SET SCI_SCLK3 TO _SER_CLOCK_LOW, SLOW;
  SET SCI_SCLK2_EONLY TO _SER_CLOCK_HIGH, SLOW;

}


WAVEFORM bounceTGTest
{
 0: SET TG to _TG_CLOCK_HIGH,FAST;
 30: SET TG to _TG_CLOCK_LOW, FAST;
 60: SET NOP to HIGH;
 0: SET PIXEL TO HIGH;
  .+1: SET PIXEL TO LOW;
  SET FRAME TO LOW;
  SET LINE TO LOW;

}



WAVEFORM setupTGTest
{
 0: SET FRAME TO HIGH;
  SET LINE TO HIGH;

}







/*
WAVEFORM wPixel {
 0:	 SET PIXEL    TO HIGH;
 .+TICK: SET PIXEL    TO LOW;
	 SET FRAME    TO LOW;
	 SET LINE     TO LOW;
}
*/
