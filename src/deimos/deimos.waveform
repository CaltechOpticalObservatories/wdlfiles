/* -*- C -*- */
/** ---------------------------------------------------------------------------
 * @file   deimos_science.wavform
 * @brief  DEIMOS timing file; rules for waveform generation and scripting
 *
 * syntax (is case sensitive):
 *
 * WAVEFORM waveformlabel { rules }
 *
 * where rules (enclosed in curly braces) are as follows:
 *
 * [time]: [=timelabel] SET signallabel TO level;
 *
 * time: at least one time label is required, followed by colon
 *       (if omitted then SET... lines are all at the same time as previous time)
 *       arithmetic operations are allowed for time
 *       units are allowed to follow numbers, E.G. ns, us, ms
 *       ".+" means to add to the previous time
 *
 * =timelabel is an optional label for this time, which can be used elsewhere
 *
 * SET signallabel TO level; 
 * is required and must end with a semi-colon
 * signallabel and level can be defined anywhere
 *
 */

#include voltage_timing_parameters.h

/*****************************************/
/*             LOGIC STATES              */
/*****************************************/
#define OPEN  1
#define CLOSE 0
#define HIGH  1
#define LOW   0

#define INV_HIGH 0 //Some signals are inverted. Use this sigil to indicate that
#define INV_LOW 1



/*
WAVEFORM SerialRecieving {
 0: 		SET SCI_SCLK1	TO _SER_CLOCK_RCV, FAST;
			SET SCI_SCLK2	TO _SER_CLOCK_RCV, FAST;
 .+SCLK_RCV_RESET:	SET RG	TO LOW;
}
*/

/*****************************************/
/*         ARCHON Timing Control         */
/*****************************************/

WAVEFORM Wait1us {
 0: 	SET NOP TO HIGH;
 .+1us:	RETURN;
}

WAVEFORM Wait1ms {
 0:   SET NOP TO HIGH;
 .+1ms: RETURN;
}

/* WAVEFORM Wait1s { */
/*  0: SET NOP TO HIGH; */
/*  .+1s: RETURN; */
/* } */

WAVEFORM KeepThisFrame {
 0: SET FRAME TO HIGH;
}


/*****************************************/
/*       Integration related waveforms   */
/*****************************************/

WAVEFORM SetupIntegration {
 0: SET SHUTTER TO OPEN;

}

WAVEFORM TearDownIntegration {
 0: SET SHUTTER TO CLOSE;
}

WAVEFORM ReadoutBegin
{
 0: SET FRAME TO HIGH;
}


WAVEFORM TransferToSerialRegister
{
  //set serials to receive charge
 0:=BEGIN SET SCI_SCLK1 TO _SER_CLOCK_RCV, FAST;
    SET SCI_SCLK2 TO _SER_CLOCK_RCV, FAST;
 .+SERTRANSDELAY: SET TG TO _TG_CLOCK_HIGH, FAST;
 .+TGDELAY:=END_RECV SET TG TO _TG_CLOCK_LOW, FAST;
    SET SCI_SCLK1 TO _SER_CLOCK_LOW, FAST;
    SET SCI_SCLK2 TO _SER_CLOCK_HIGH, FAST;
    SET LINE TO HIGH;

    //simultaneously, operate the AC clamp
    BEGIN: SET AC_Clamp to HIGH;
    .+AC_CLAMP_ON_TIME: SET AC_Clamp to LOW;
 END_RECV: SET NOP TO HIGH;
    .+AC_CLAMP_EXTRA_RECOVER: RETURN;
}



//waveforms for coincident (triangular) parallel clocking
WAVEFORM ParallelForwardSegment1
{
  //NOTE: after integration, if done properly
  //all charge should be under SCI_PCLK3
  // the transfer to serial reg is done before this happens
 0: SET SCI_PCLK3 to _PAR_CLOCK_LOW, SLOW;
    SET SCI_PCLK1 to _PAR_CLOCK_HIGH, SLOW;
}

WAVEFORM ParallelForwardSegment2
{
 0: SET SCI_PCLK1 TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK2 TO _PAR_CLOCK_HIGH, SLOW;
}

WAVEFORM ParallelForwardSegment3
{
 0: SET SCI_PCLK2 TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK3 TO _PAR_CLOCK_HIGH, SLOW;
}

WAVEFORM ReadPixels
{
  //NB using slow slew rate for triangular serial clocking
 0:=PIX_BEGIN
  //SW and RG are on LVDS  signals
    SET RG TO INV_HIGH; //NOTE reset gate is inverted

  PIX_BEGIN+RG_settleT: SET RG to INV_LOW;
  SET PIXEL TO HIGH;
  .+1:=CDS_RESET_BEGIN SET PIXEL TO LOW;
  SET LINE TO LOW;
    SET FRAME TO LOW;
  //serials COINCIDENT, start moving charge immediately
  //when CDS reset begins
  SET SCI_SCLK2 TO _SER_CLOCK_LOW, SLOW;
  SET SCI_SCLK3 TO _SER_CLOCK_HIGH, SLOW;

  //...except the summing wells at the output which we pulse just when we
  //finish CDS first integration period
  CDS_RESET_BEGIN+COINC_SW_DELAY:=SWPULSE_START SET SW TO INV_HIGH; //NOTE: summing well is inverted
  SWPULSE_START+SW_settleT: SET SW TO INV_LOW;

  //now we're in the CDS signal period begin triangular shuffling serials again
  CDS_RESET_BEGIN+CDS_RESET_LENGTH: SET SCI_SCLK3 TO _SER_CLOCK_LOW, SLOW;
  SET SCI_SCLK1 TO _SER_CLOCK_HIGH, SLOW;

  .+CDS_SIGNAL_LENGTH: SET SCI_SCLK1 TO _SER_CLOCK_LOW, SLOW;
  SET SCI_SCLK2 TO _SER_CLOCK_HIGH, SLOW;
  
}

#define PCLK_NOREAD_DELAY 


WAVEFORM ForwardParallelSectionA
{
 0: SET SCI_PCLK3_A to _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK1_A to _PAR_CLOCK_HIGH, SLOW;
  PAR_SLEW_TIME_US*100: SET SCI_PCLK1_A to _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK2_A TO _PAR_CLOCK_HIGH, SLOW;
  2*PAR_SLEW_TIME_US*100: SET SCI_PCLK2_A TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK3_A TO _PAR_CLOCK_HIGH, SLOW;

}

WAVEFORM ParallelForwardSectionASegment1
{
 0: SET SCI_PCLK3_A to _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK1_A to _PAR_CLOCK_HIGH, SLOW;
}

WAVEFORM ParallelForwardSectionASegment2
{
  0: SET SCI_PCLK1_A to _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK2_A TO _PAR_CLOCK_HIGH, SLOW;
}

WAVEFORM ParallelForwardSectionASegment3
{
  0: SET SCI_PCLK2_A TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK3_A TO _PAR_CLOCK_HIGH, SLOW;
}




WAVEFORM BackwardParallelSectionB
{
 0: SET SCI_PCLK3_B TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK1_B TO _PAR_CLOCK_LOW, SLOW;
  PAR_SLEW_TIME_US*100: SET SCI_PCLK1_B TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK2_B TO _PAR_CLOCK_HIGH, SLOW;
  2*PAR_SLEW_TIME_US*100: SET SCI_PCLK2_B TO _PAR_CLOCK_LOW, SLOW;
  SET SCI_PCLK3_B TO _PAR_CLOCK_HIGH, SLOW;
}






/*
WAVEFORM wPixel {
 0:	 SET PIXEL    TO HIGH;
 .+TICK: SET PIXEL    TO LOW;
	 SET FRAME    TO LOW;
	 SET LINE     TO LOW;
}
*/
