/* -*- C -*- */
/** ---------------------------------------------------------------------------
 * @file     deimos.seq
 * @brief    sequence file for DEIMOS science detectors
 * @author   Joseph Bichel
 * @date     2024-12-02
 * @modified 
 *
 */

/** ---------------------------------------------------------------------------

/** ---------------------------------------------------------------------------
 * parameter definitions
 * syntax: param paramname=value
*/



/** System Control Triggers **/
param readout_enable = 1 //will be pulled externally when we want a frame
param integrate_enable = 0 // to be set externally if we want an integration time

param integrate_ms = 0 // will be set externally to choose integration ms
param integrate_s = 0 // will be set externally to choose integration seconds

param framecount = 0 //will be set 

SEQUENCE StartSeq {
    if integrate_enable CheckIntegrate();
    if readout_enable CheckReadout();
    framecount--;
    GOTO StartSeq();
}

SEQUENCE CheckIntegrate
{
  if framecount Integrate();
  RETURN;
}
  
SEQUENCE Integrate
{
  SetupIntegration();
  Wait1ms(integrate_ms);
  Wait1s(integrate_s);
  TearDownIntegration();
  RETURN;
}

SEQUENCE CheckReadout
{
  if framecount KeepThisFrame();
  FrameReadout();
  RETURN;
}


#define LINE_COLS #eval _SERIALPRESCAN + _AMPCOLS


//segment calculations
//this does floor arithmetic, so might end up with wrong number
//if number cols changes
#define PIXELS_PER_SEG #eval _AMPCOLS / 3
#define REMAINDER_PIX #eval _AMPCOLS - (PIXELS_PER_SEG * 3)


SEQUENCE FrameReadout
{
  ReadoutBegin();
  //single serial read to flush the register
  ReadPixels(_AMPREADCOLS);
  //read all image rows
  LineReadout(_IMAGEROWS);
  //and the desired overscan
  LineReadout(_PARALLELOVERSCAN);
  RETURN;
}


//NOTE this has to be a sequence because can't call
//enough repeats in 1ms archon limit of repeats
SEQUENCE Wait1s {
  Wait1ms(1000);
  RETURN;
}


SEQUENCE LineReadout
{
  TransferToSerialRegister();
  ReadPixels(_SERIALPRESCAN);
  ParallelForwardSegment1();
  ReadPixels(PIXELS_PER_SEG);
  ParallelForwardSegment2();
  ReadPixels(PIXELS_PER_SEG);
  ParallelForwardSegment3();
  ReadPixels(PIXELS_PER_SEG);
  //if there are leftover pixels, do them here
  #if _AMPCOLS % 3
   ReadPixels(REMAINDER_PIX);

  #endif
   RETURN;
}


SEQUENCE ParallelDCMeasReadout
{
  ReadoutBegin();
  //single line read to flush the register
  ReadPixels(_AMPREADCOLS);
  
  
  //dump the 'A' image section
  RETURN;

}

  

