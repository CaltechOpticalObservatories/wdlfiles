/* -*- C -*- */
/** ---------------------------------------------------------------------------
 * @file     wasp.seq
 * @brief    sequence file for WaSP
 * @author   David Hale
 * @date     2016-08-01
 * @modified 2016-08-01 SK
 *
 */

/** ---------------------------------------------------------------------------
 * parameter definitions
 * syntax: param paramname=value
*/

param Expose=0
param Readout=0
param FauxFlag=0
param FauxPixels=_PIXELS_PER_TAP
param PartialLines=258
param exptime=0
param gexptime=0
param GReadout=0
param FReadout=0
param Idle=1
param GuideFrames=0
param FocusFrames=0
param shutterdelay=_SHDEL
param SweepCount=0
param GBin=0
param RoiLStart=0
param RoiNLines=0
param GLines=1132
param GBinLines=_GLINES_BIN_PER_TAP
  param GPixels=2172 /*_GPIXELS_PER_TAP*/
param GBinPixels=_GPIXELS_BIN_PER_TAP
param PBin=2
param SplitLines=_LINES_PER_TAP
param Pixels=_PIXELS_PER_TAP
param BinPixels=1032
param SplitBinLines=516
param ROI=0
param Testing=0
param abort=0
param Left=0
param Right=1
param GUp=1
param GDown=0
param FUp=1
param FDown=0
param GClear=0
param FrmStr=1024 /* What number of lines do we shift to get into the frame store? */


SEQUENCE Start {
  ADClamp_();
  OpenBLC();
}

/** ---------------------------------------------------------------------------
 * @fn     MAIN
 * @brief  the main loop.  MAIN is implicitly an infinite loop.
 *
 */
SEQUENCE WaitForExpose {
  if Expose DoExpose();
  if Idle Idling();                     /* Calls the idling routine and returns to the MAIN loop */
  GOTO WaitForExpose();
}

SEQUENCE WaitForReadout {
  if GReadout GOTO DoGuideReadout();
  if FReadout GOTO DoFocusReadout();
  if Readout  GOTO DoFocusReadout();
  GOTO WaitForReadout();
}

/** ---------------------------------------------------------------------------
 * @fn	    Idling
 * @brief   Idle sequence to push one parallel line and read the full serial register
 */
SEQUENCE Idling {
  OpenBLC();
  ADClamp_();
  GParallelSplit();
  FParallelSplit();
  if Left GSerialReadLeft(GPixels);   /* The serials for the guider and focus are the       */
  if Right GSerialReadRight(GPixels); /* same, so these don't matter whether we are reading */
  GroundBLC();
  ADClamp();
  return;
}

SEQUENCE DoExpose {
  Expose--;
  if exptime OpenShutter();
  if exptime MilliSec(exptime);
  wCloseShutter();
  if exptime DoShutterDelay(shutterdelay);
  GOTO WaitForReadout();
}

SEQUENCE OpenShutter {
  if exptime wOpenShutter();
  return;
}

SEQUENCE DoShutterDelay {
  Wait1ms();
  return;
}

SEQUENCE DoGuideReadout {
  GuideFrames--;
  GReadout--;
  MilliSec(gexptime);
  wFrame();
  DoGuider(GLines);
  GOTO WaitForExpose();
}

SEQUENCE DoGuider {
  GParallelSplit();             /* Guider and Focus labels on VIB are wrong,           */
                 /* so substitutes focus parallels for guider parallels */
  wLine();
  if Left GSerialReadLeft(GPixels);   /* The serials for the guider and focus are the       */
  if Right GSerialReadRight(GPixels); /* same, so these don't matter whether we are reading */
  FGSerialReceiving();
  Wait1us();
  GroundBLC();
  ADClamp();
  Wait1us();
    OpenBLC();                 /* so substitutes focus parallels for guider parallels */
  ADClamp_();

  /* Wait1ms(); */
  /*  if abort GOTO AbortTheData();*/
  return;
}

SEQUENCE DoFocusReadout {
  FocusFrames--;
  FReadout--;
  Readout--;
  wOpenShutter();
  MilliSec(gexptime);
  wCloseShutter();
  wFrame();
  DoFocus(GLines);
  GOTO WaitForExpose();
}

SEQUENCE DoFocus {
  /*  FParallelUp();*/ /* Put in both guider and focus for testing purposes */
  GParallelSplit(); /* This is temporary to read all out at once */
  FParallelSplit();
  OpenBLC();
  ADClamp_();
  wLine();
  if Left GSerialReadLeft(GPixels);   /* The serials for the guider and focus are the       */
  if Right GSerialReadRight(GPixels); /* same, so these don't matter whether we are reading */
  FGSerialReceiving();
  Wait1us();
  GroundBLC();
  ADClamp();
  Wait1us();
    OpenBLC();                 /* so substitutes focus parallels for guider parallels */
  ADClamp_();
  return;
}

SEQUENCE MilliSec {
  Wait1ms();	/* This is a placeholder 1ms routine - Need to fix up */
  if abort GOTO WaitForExpose(); /* This abort here is a bit suspect.  The stack isn't cleared of the return when this happens */
  return;
}


/** ---------------------------------------------------------------------------
 * @fn	    DoFauxSignal
 * @brief   Sequence which makes a fake CCD signal, and also starts a conversion of the signal
 *          The conversion will fill up a small frame to begin testing and then a full
 *          science frame for simulation purposes.
 */

SEQUENCE DoFauxSignal {
  FauxFlag--;
  Readout--;
  wFrame(); /* Start the frame counter */
  FauxRead();
  FauxToZero();
  return;
}

SEQUENCE FauxRead {
  DoLevel1(PartialLines);
  DoLevel2(PartialLines);
  DoLevel3(PartialLines);
  DoLevel4(PartialLines);
  DoLevel5(PartialLines);
  DoLevel6(PartialLines);
  DoLevel7(PartialLines);
  DoLevel8(PartialLines);

  /* wLine(); */
  /*  FauxHighSignal(FauxPixels); */
  /* GroundBLC(); */
     /* ADClamp(); */
  /* Wait1ms(); */
  /*ADClamp_(); */
  return;
}

SEQUENCE DoLevel1 {
  /*DoLineTransfer();*/
  OpenBLC();
  ADClamp_();
  wLine();
  FauxLevel1(FauxPixels);
  Wait1ms();
  GroundBLC();
  ADClamp();
  Wait1ms();
  return;
}

SEQUENCE DoLevel2 {
  OpenBLC();
  ADClamp_();
  wLine();
  FauxLevel2(FauxPixels);
  Wait1ms();
  GroundBLC();
  ADClamp();
  Wait1ms();
  return;
}

SEQUENCE DoLevel3 {
  OpenBLC();
  ADClamp_();
  wLine();
  FauxLevel3(FauxPixels);
  GroundBLC();
  ADClamp();
  Wait1ms();
  return;
}

SEQUENCE DoLevel4 {
  OpenBLC();
  ADClamp_();
  wLine();
  FauxLevel4(FauxPixels);
  GroundBLC();
  ADClamp();
  Wait1ms();
  return;
}

SEQUENCE DoLevel5 {
  OpenBLC();
  ADClamp_();
  wLine();
  FauxLevel5(FauxPixels);
  GroundBLC();
  ADClamp();
  Wait1ms();
  return;
}

SEQUENCE DoLevel6 {
  OpenBLC();
  ADClamp_();
  wLine();
  FauxLevel6(FauxPixels);
  GroundBLC();
  ADClamp();
  Wait1ms();
  return;
}

SEQUENCE DoLevel7 {
  OpenBLC();
  ADClamp_();
  wLine();
  FauxLevel7(FauxPixels);
  GroundBLC();
  ADClamp();
  Wait1ms();
  return;
}

SEQUENCE DoLevel8 {
  OpenBLC();
  ADClamp_();
  wLine();
  FauxLevel8(FauxPixels);
  GroundBLC();
  ADClamp();
  Wait1ms();
  return;
}
